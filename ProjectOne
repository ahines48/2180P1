import numpy as np
import json
import os

#resistances = json.loads(''')
#voltages = json.loads(''')
def readDataFiles():
    base_path = os.path.dirname(__file__)
    node_resistances_path = os.path.join(base_path, 'node_resistances.json')
    node_voltages_path = os.path.join(base_path, 'node_voltages.json')

    with open(node_resistances_path, 'r') as file:
        node_resistances = json.load(file)

    with open(node_voltages_path, 'r') as file:
        node_voltages = json.load(file)
        
        
    #node_resistances = [[entry['node1'], entry['node2'], entry['resistance']] for entry in node_resistances]
    #node_voltages = [[entry['node'], entry['voltage']] for entry in node_voltages]

    return node_resistances, node_voltages
resistances, voltages = readDataFiles()
A = np.zeros((25,25))
b = np.zeros(25)

b[0] = 10.0
b[24] = 0.0

for resistance in resistances:
    n1 = resistance['node1'] - 1  # Convert to zero index
    n2 = resistance['node2'] - 1  # Convert to zero index
    r = resistance['resistance']
    A[n1][n1] += 1 / r
    A[n1][n2] -= 1 / r
    A[n2][n2] += 1 / r
    A[n2][n1] -= 1 / r

print("Matrix A:")
print(A)
print("\nVector b:")
print(b)


def LU_Decomp(matrix):
    n = matrix.shape[0]
    L = np.zeros((n,n))
    U = np.copy(matrix)
    for i in range(n):
        L[i,i] = 1
        for j in range(i+1,n):
            factor = U[j,i]/U[i,i]
            L[j,i] = factor
            for k in range(i,n):
                U[j,k] -= factor*U[i,k]
    return L, U

def solve_Y(L, B):
    n = L.shape[0]
    y = np.zeros(n)
    for i in range(n):
        y[i] = B[i]
        for j in range(i):
            y[i] -= L[i,j]*y[j]
    return y

def solve_X(U, y):
    n = U.shape[0]
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = y[i]
        for j in range(i+1, n):
            x[i] -= U[i, j] * x[j]
        x[i] /= U[i, i]
    return x

#Test arrays for LU decomp stuff should be -.5, 5, -7
#A= np.array([[2, 1, 1], 
#    [4, 4, 3], 
#    [8, 10, 13]])
#b = np.array([-3, -3, -45])

L,U = LU_Decomp(A)
y = solve_Y(L, b)
Voltages = solve_X(U, y)

np.savetxt('V_matrix.csv', Voltages, delimiter=',', fmt='%0.4f')
np.savetxt('L_matrix.csv', L, delimiter=',', fmt='%0.4f')
np.savetxt('U_matrix.csv', U, delimiter=',', fmt='%0.4f')