import numpy as np
import json
import os


# resistances = json.loads(''')
# voltages = json.loads(''')
def readDataFiles():
    base_path = os.path.dirname(__file__)
    node_resistances_path = os.path.join(base_path, 'node_resistances.json')
    node_voltages_path = os.path.join(base_path, 'node_voltages.json')

    with open(node_resistances_path, 'r') as file:
        node_resistances = json.load(file)

    with open(node_voltages_path, 'r') as file:
        node_voltages = json.load(file)

    # node_resistances = [[entry['node1'], entry['node2'], entry['resistance']] for entry in node_resistances]
    # node_voltages = [[entry['node'], entry['voltage']] for entry in node_voltages]

    return node_resistances, node_voltages


def LU_Decomp(matrix):
    n = matrix.shape[0]
    L = np.zeros((n, n))
    U = np.copy(matrix)
    for i in range(n):
        L[i, i] = 1
        for j in range(i + 1, n):
            if U[i,i] != 0:
                factor = U[j, i] / U[i, i]
            else:
                factor = 0
            L[j, i] = factor
            for k in range(i, n):
                U[j, k] -= factor * U[i, k]
    return L, U


def solve_Y(L, B):
    n = L.shape[0]
    y = np.zeros(n)
    for i in range(n):
        y[i] = B[i]
        for j in range(i):
            y[i] -= L[i, j] * y[j]
    return y

def solve_X(U, y):
    n = U.shape[0]
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = y[i]
        for j in range(i + 1, n):
            x[i] -= U[i, j] * x[j]
        if U[i,i] != 0:
            x[i] /= U[i, i]
        else:
            x[i] = 0
    return x


resistances, voltages = readDataFiles()
A = np.zeros((25, 25))
b = np.zeros(25)

b[0] = 10.0
b[24] = 0.0

A[0,0] = 1
A[24,24] = 1


for resistance in resistances:
    n1 = resistance['node1'] - 1  # Convert to zero index
    n2 = resistance['node2'] - 1  # Convert to zero index
    r = resistance['resistance']
    A[n1][n1] += 1 / r
    A[n1][n2] -= 1 / r
    A[n2][n2] += 1 / r
    A[n2][n1] -= 1 / r

print("Matrix A:")
print(A)
print("\nVector b:")
print(b)




# Test arrays for LU decomp stuff should be -.5, 5, -7
# A= np.array([[2, 1, 1],
#    [4, 4, 3],
#    [8, 10, 13]])
# b = np.array([-3, -3, -45])
L, U = LU_Decomp(A)
y = solve_Y(L, b)
Voltages = solve_X(U, y)

np.savetxt('A_matrix.csv', A, delimiter=',', fmt='%0.4f', header='A matrix')
np.savetxt('b_vector.csv', b, delimiter=',', fmt='%0.4f', header='b vector')
np.savetxt('V_matrix.csv', Voltages, delimiter=',', fmt='%0.4f', header='V matrix')
np.savetxt('L_matrix.csv', L, delimiter=',', fmt='%0.4f', header='L matrix')
np.savetxt('U_matrix.csv', U, delimiter=',', fmt='%0.4f', header='U matrix')

print("Node Voltages: ")
print(Voltages)

currents = []
for resistance in resistances:
    n1 = resistance['node1'] - 1
    n2 = resistance['node2'] - 1
    r = resistance['resistance']
    current = (Voltages[n1] - Voltages[n2]) / r
    currents.append({
        "node1": n1 + 1,
        "node2": n2 + 1,
        "current": current
    })

print("\nCurrents: ")
for current in currents:
    node1 = current['node1']
    node2 = current['node2']
    current_value = current['current']
    print(f"Nodes {node1} to {node2}: {current_value:.4f} A")

currents_array = np.array([(current['node1'], current['node2'], current['current']) for current in currents])
np.savetxt('currents.csv', currents_array, delimiter=',', fmt=['%d', '%d', '%.4f'], header='node1,node2,current', comments='')


def treeNetwork():
    resistances, voltages = readDataFiles()
    n = 25
    A_tree = np.zeros((n,n))
    b_tree = np.zeros(n)

    b_tree[0] = 10.0
    b_tree[24] = 0.0

    A_tree[0, 0] = 1
    A_tree[24, 24] = 1

    for voltage in voltages:
        node_number = voltage['node'] - 1
        if node_number != 0 and node_number != 24:
            voltage_number = voltage['voltage']
            b_tree[node_number] = voltage_number

    for resistance in resistances:
        n1 = resistance['node1'] - 1  # Convert to zero index
        n2 = resistance['node2'] - 1  # Convert to zero index
        r = resistance['resistance']
        A_tree[n1][n1] += 1 / r
        A_tree[n1][n2] -= 1 / r
        A_tree[n2][n2] += 1 / r
        A_tree[n2][n1] -= 1 / r

    L_tree, U_tree = LU_Decomp(A_tree)
    y_tree = solve_Y(L_tree, b_tree)
    Voltages_tree = solve_X(U_tree, y_tree)

    np.savetxt('A_tree_matrix.csv', A_tree, delimiter=',', fmt='%0.4f', header='Tree A matrix')
    np.savetxt('b_tree_vector.csv', b_tree, delimiter=',', fmt='%0.4f', header='Tree b vector')
    np.savetxt('L_tree_matrix.csv', L_tree, delimiter=',', fmt='%0.4f', header='Tree L matrix')
    np.savetxt('U_tree_matrix.csv', U_tree, delimiter=',', fmt='%0.4f', header='Tree U matrix')
    np.savetxt('V_tree_matrix.csv', Voltages_tree, delimiter=',', fmt='%0.4f', header='Tree Voltages')

    print("Tree Node Voltages: ")
    print(Voltages_tree)

treeNetwork()
